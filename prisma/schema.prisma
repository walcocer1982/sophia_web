generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole @default(STUDENT) // Campo de rol para autorización

  // Relaciones
  accounts      Account[]
  sessions      Session[]
  lessonSessions LessonSession[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LessonSession {
  id                String   @id @default(uuid())

  // Relaciones
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId          String   // ID de la lección (ej: "SSO001_lesson_01")

  // Identificación de sesión
  sessionNumber     Int      @default(1) // Permite múltiples intentos de la misma lección

  // Progreso actual
  currentMomentId   String   // ID del momento actual (ej: "m1", "m2", etc.)
  completedMoments  String[] // Array de IDs de momentos completados

  // Estado
  isCompleted       Boolean  @default(false)
  score             Float?   // Puntuación general 0-1

  // Estadísticas de la sesión
  totalAttempts     Int      @default(0)
  correctAnswers    Int      @default(0)
  hintsUsed         Int      @default(0)

  // Timestamps
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  lastAccessedAt    DateTime @default(now())

  // Relaciones con mensajes y respuestas
  chatMessages      ChatMessage[]
  studentResponses  StudentResponse[]

  // Constraints - permite múltiples sesiones por usuario-lección
  @@unique([userId, lessonId, sessionNumber])
  @@index([userId])
  @@index([lessonId])
  @@index([userId, lessonId])
}


model ChatMessage {
  id                String        @id @default(uuid())
  // Relaciones
  sessionId         String
  session           LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  // Contenido del mensaje
  role              String        // 'user' | 'assistant' | 'system'
  content           String        @db.Text
  // Contexto educativo
  momentId          String?       // En qué momento se envió
  // Orden secuencial
  sequence          Int           // 1, 2, 3... por sesión
  // Timestamps
  createdAt         DateTime      @default(now())
  // Relación con respuestas evaluadas (solo para mensajes de usuario)
  studentResponse   StudentResponse?
  // Garantizar orden único por sesión
  @@unique([sessionId, sequence])
  @@index([sessionId])
  @@index([createdAt])
}

// Respuestas evaluadas (enlaza mensaje + evaluación)
model StudentResponse {
  id                String        @id @default(uuid())

  // Relaciones
  sessionId         String
  session           LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  messageId         String        @unique
  message           ChatMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  // Contexto educativo
  momentId          String        // ID del momento (ej: "m1", "m2")
  question          String        // Pregunta realizada
  studentAnswer     String        // Respuesta del estudiante

  // Evaluación
  isCorrect         Boolean       // Si fue correcta o no
  score             Float?        // Puntuación 0-1

  // Evaluación AI
  aiAnalysis        Json?         // Análisis completo de la AI
  feedback          String?       // Feedback generado
  hintsGiven        String[]      // Pistas proporcionadas

  // Metadata
  responseTime      Int?          // Tiempo en responder (segundos)
  attempt           Int           @default(1) // Número de intento para esta pregunta

  // Timestamps
  answeredAt        DateTime      @default(now())

  // Índices para análisis
  @@index([sessionId])
  @@index([sessionId, momentId])
  @@index([answeredAt])
}
