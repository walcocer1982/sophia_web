generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Enums para lógica de IA
   ========================= */
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ResponseTag {
  CORRECT
  PARTIAL
  INCORRECT
  CONCEPTUAL
  COMPUTATIONAL
  NEEDS_HELP
}

enum NextStep {
  ADVANCE
  REINFORCE
  RETRY
  COMPLETE
}

/* =========================
   Auth (sin cambios)
   ========================= */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)

  // Relaciones
  accounts       Account[]
  lessonSessions LessonSession[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* =========================
   Core de lecciones/IA
   ========================= */
model LessonSession {
  id                String   @id @default(uuid())

  // Relaciones
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Identificador lógico de la lección (ruta/TS)
  lessonId          String   // ej: "SSO001_lesson_01"

  // Identificación de sesión
  sessionNumber     Int      @default(1) // múltiples intentos de la misma lección

  // Progreso actual (ahora Int)
  currentMomentId   Int
  completedMoments  Int[]

  // Estado general
  isCompleted       Boolean  @default(false)
  score             Float?   // Puntuación general 0-1

  // Estadísticas agregadas (históricas)
  totalAttempts     Int      @default(0)
  correctAnswers    Int      @default(0)
  hintsUsed         Int      @default(0)

  // Memoria/estado para IA (MVP)
  sessionSummary     String?      @db.Text   // memoria cacheada (300–600 tokens)
  aggregateMastery   Float        @default(0.5) // 0..1
  lastMasteryDelta   Float?
  consecutiveCorrect Int          @default(0)
  attemptsInCurrent  Int          @default(0)
  lastTags           ResponseTag[]
  lastDifficulty     Difficulty?
  nextStepHint       String?

  // Timestamps
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  lastAccessedAt    DateTime @default(now())

  // Relaciones con mensajes y respuestas
  chatMessages      ChatMessage[]
  studentResponses  StudentResponse[]
  aiOutcomes        AIOutcome[]

  // Constraints - permite múltiples sesiones por usuario-lección
  @@unique([userId, lessonId, sessionNumber])
  @@index([userId])
  @@index([lessonId])
  @@index([userId, lessonId])
}

model ChatMessage {
  id                String        @id @default(uuid())

  // Relaciones
  sessionId         String
  session           LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Contenido del mensaje
  role              String        // 'user' | 'assistant' | 'system' (texto libre en MVP)
  content           String        @db.Text

  // Contexto educativo (ahora Int)
  momentId          Int?

  // Orden secuencial
  sequence          Int           // 1, 2, 3... por sesión

  // Timestamps
  createdAt         DateTime      @default(now())

  // Relación con respuestas evaluadas (solo para mensajes de usuario)
  studentResponse   StudentResponse?

  // Garantizar orden único por sesión
  @@unique([sessionId, sequence])
  @@index([sessionId])
  @@index([createdAt])
}

// Respuestas evaluadas (enlaza mensaje + evaluación)
model StudentResponse {
  id                String        @id @default(uuid())

  // Relaciones
  sessionId         String
  session           LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  messageId         String        @unique
  message           ChatMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  // Contexto educativo (ahora Int)
  momentId          Int           // ej: 0, 1, 2...

  // Turno: entrada del alumno
  question          String        // pregunta mostrada
  studentAnswer     String        @db.Text

  // Evaluación “clásica” (opcional en MVP, mantenida por compatibilidad)
  isCorrect         Boolean
  score             Float?        // 0-1
  aiAnalysis        Json?         // análisis completo (si lo sigues usando)
  feedback          String?
  hintsGiven        String[]

  // Metadata
  responseTime      Int?
  attempt           Int           @default(1)

  // Timestamps
  answeredAt        DateTime      @default(now())

  // Relación 1–1 con resultado IA del turno
  aiOutcome         AIOutcome?

  // Índices para análisis
  @@index([sessionId])
  @@index([sessionId, momentId])
  @@index([answeredAt])
}

/* Resultado estructurado de IA por turno (1–1 con StudentResponse) */
model AIOutcome {
  id                String        @id @default(uuid())

  // Relaciones
  sessionId         String
  session           LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  responseId        String        @unique
  response          StudentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  // Contexto
  momentId          Int           // momento evaluado (para consultas rápidas)
  // Respuesta IA cruda (JSON del schema validado por Zod)
  raw               Json

  // Campos denormalizados
  aiMessage         String        @db.Text   // chat.message
  aiHints           String[]                  // chat.hints
  masteryDelta      Float                      // progress.masteryDelta
  nextStep          NextStep                   // progress.nextStep
  tags              ResponseTag[]              // progress.tags
  difficulty        Difficulty?                // analytics.difficulty
  reasoningSignals  String[]                   // analytics.reasoningSignals

  // Timestamps
  createdAt         DateTime      @default(now())

  // Índices
  @@index([sessionId])
  @@index([sessionId, momentId])
  @@index([createdAt])
}
